---
version: 2.1

orbs:
  terraform: twdps/terraform@0.5.0
  # used for github-release-notes feature
  executor-tools: twdps/executor-tools@0.8.0

# ==== global pipeline parameters

parameters:
  terraform-version:
    description: terraform version for all jobs
    type: string
    default: "1.2.2"
  context:
    description: circleci context for all jobs
    type: string
    default: twdps-core-labs-team
  executor-image:
    description: image to use for terraform runs
    type: string
    default: twdps/circleci-infra-aws:alpine-1.7.0

# ==== triggers

# git push: deploy nonprod (dps-2)
on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

# git tag: deploy prod (dps-1)
on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

commands:

  set-environment:
    description: generate environment credentials and configuration from templates
    parameters:
      account:
        description: account to be configured
        type: string
    steps:
      - run:
          name: set ~/.terraformrc
          command: op inject -i tpl/terraformrc.tpl -o ~/.terraformrc
      - run:
          name: set << parameters.account >> environment variables
          command: op inject -i environments/<< parameters.account >>.auto.tfvars.json.tpl -o << parameters.account >>.auto.tfvars.json
      - run:
          name: set twdps.io gpg keys
          command: bash scripts/import_gpg_keys.sh

jobs:

  test-configuration-and-write-credentials:
    description: |
      bats tests of the resulting infrastructure resources and write the service accounts
      credentials when successful during create_iam_profiles run.
    docker:
      - image: << pipeline.parameters.executor-image >>
    environment:
      TF_WORKSPACE: << parameters.account >>
    shell: op run --env-file op.<< parameters.account >>.env -- /bin/sh -eo pipefail
    parameters:
      account:
        description: nonprod or production account configuration
        type: string
      test-only:
        description: run validation only without writing credentials
        type: boolean
        default: false
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: inject environment variables
          command: |
            op inject -i op.<< parameters.account >>.env -o $BASH_ENV
            source $BASH_ENV
      - set-environment:
          account: << parameters.account >>
      - run:
          name: test << parameters.account >> configuration
          command: bash scripts/test_configuration.sh << parameters.account >>
      - when:
          condition:
            and:
              - equal: [ << parameters.account >>, "nonprod" ]
              - equal: [ << parameters.test-only >>, false ]
          steps:
            - terraform/setup-packages:
                terraform-version: << pipeline.parameters.terraform-version >>
            - run:
                name: write service account credentials when create_iam_profiles = true
                command: |
                  bash scripts/write_service_account_credentials.sh

workflows:
  version: 2

  deploy-nonprod-profile-and-roles:
    jobs:
      - terraform/plan:
          name: nonprod-change-plan
          context: << pipeline.parameters.context >>
          shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
          workspace: nonprod
          executor-image: << pipeline.parameters.executor-image >>
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - run:
                name: inject environment variables
                command: |
                  op inject -i op.nonprod.env -o $BASH_ENV
                  source $BASH_ENV
            - set-environment:
                account: nonprod
          filters: *on-push-main

      - approve-nonprod-changes:
          type: approval
          requires:
            - nonprod-change-plan
          filters: *on-push-main

      - terraform/apply:
          name: nonprod-change-apply
          context: << pipeline.parameters.context >>
          shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
          workspace: nonprod
          executor-image: << pipeline.parameters.executor-image >>
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - run:
                name: inject environment variables
                command: |
                  op inject -i op.nonprod.env -o $BASH_ENV
                  source $BASH_ENV
            - set-environment:
                account: nonprod
          requires:
            - approve-nonprod-changes
          filters: *on-push-main

      - test-configuration-and-write-credentials:
          name: test-nonprod-iam-configuration
          context: << pipeline.parameters.context >>
          account: nonprod
          requires:
            - nonprod-change-apply
          filters: *on-push-main

  deploy-prod-roles:
    jobs:
      - terraform/plan:
          name: prod-change-plan
          context: << pipeline.parameters.context >>
          shell: op run --env-file op.prod.env -- /bin/bash -eo pipefail
          workspace: prod
          executor-image: << pipeline.parameters.executor-image >>
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - run:
                name: inject environment variables
                command: |
                  op inject -i op.prod.env -o $BASH_ENV
                  source $BASH_ENV
            - set-environment:
                account: prod
          filters: *on-tag-main

      - approve-prod-changes:
          type: approval
          requires:
            - prod-change-plan
          filters: *on-tag-main

      - terraform/apply:
          name: prod-change-apply
          context: << pipeline.parameters.context >>
          shell: op run --env-file op.prod.env -- /bin/bash -eo pipefail
          workspace: prod
          executor-image: << pipeline.parameters.executor-image >>
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - run:
                name: inject environment variables
                command: |
                  op inject -i op.prod.env -o $BASH_ENV
                  source $BASH_ENV
            - set-environment:
                account: prod
          requires:
            - approve-prod-changes
          filters: *on-tag-main

      - test-configuration-and-write-credentials:
          name: test-prod-iam-configuration
          context: << pipeline.parameters.context >>
          account: prod
          requires:
            - prod-change-apply
          filters: *on-tag-main

  # generate-release-notes:
  #   jobs:
  #     - executor-tools/release:
  #         name: release-lab-iam-profiles
  #         context: << pipeline.parameters.context >>
  #         before-release:
  #           - run:
  #               name: inject environment variables
  #               command: |
  #                 op inject -i op.prod.env -o $BASH_ENV
  #                 source $BASH_ENV
  #         filters: *on-tag-main


  nightly-iam-profiles-configuration-validation:
    triggers:
      - schedule:
          cron: "0 1 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - test-configuration-and-write-credentials:
          name: nightly-nonprod-iam-profiles-validation
          context: << pipeline.parameters.context >>
          account: nonprod
          test-only: true
      - test-configuration-and-write-credentials:
          name: nightly-prod-iam-profiles-validation
          context: << pipeline.parameters.context >>
          account: prod
          test-only: true
