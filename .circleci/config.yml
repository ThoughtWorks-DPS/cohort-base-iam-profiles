---
version: 2.1

orbs:
  terraform: twdps/terraform@0.4.0
  # used for github-release-notes feature
  executor-tools: twdps/executor-tools@0.2.0

# ==== global pipeline parameters

parameters:
  terraform-version:
    description: terraform version for all jobs
    type: string
    default: "1.1.3"
  context:
    description: circleci context for all jobs
    type: string
    default: twdps-core-labs-team
  executor-image:
    description: image to use for terraform runs
    type: string
    default: twdps/circleci-infra-aws:alpine-1.3.0

# ==== triggers

# git push: deploy nonprod (dps-2)
on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

# git tag: deploy prod (dps-1)
on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

commands:

  set-environment:
    description: generate environment credentials and configuration from templates
    parameters:
      env:
        type: string
        default: ''
    steps:
      - run:
          name: set ~/.terraformrc
          command: secrethub inject -i tpl/terraformrc.tpl -o ~/.terraformrc
      - run:
          name: set << parameters.env >> environment variables
          command: secrethub inject -i environments/<< parameters.env >>.auto.tfvars.json.tpl -o << parameters.env >>.auto.tfvars.json
      - run:
          name: set twdps.io gpg keys
          command: bash scripts/import_gpg_keys.sh

jobs:

  test-configuration-and-write-credentials:
    description: |
      bats tests of the resulting infrastructure resources and write the service accounts
      credentials when successful during create_iam_profiles run.
    docker:
      - image: << pipeline.parameters.executor-image >>
    environment:
      TF_WORKSPACE: << parameters.env >>
    shell: secrethub run --env-file secrethub.<< parameters.env >>.env -- /bin/sh -eo pipefail
    parameters:
      env:
        description: nonprod or production account configuration
        type: string
      test-only:
        description: run validation only without writing credentials
        type: boolean
        default: false
    steps:
      - checkout
      - setup_remote_docker
      - set-environment:
          env: << parameters.env >>
      - run:
          name: test << parameters.env >> configuration
          command: bash scripts/test_configuration.sh << parameters.env >>
      - when:
          condition:
            and:
              - equal: [ << parameters.env >>, "nonprod" ]
              - equal: [ << parameters.test-only >>, false ]
          steps:
            - terraform/setup-packages:
                terraform-version: << pipeline.parameters.terraform-version >>
            - run:
                name: write service account credentials when create_iam_profiles = true
                command: |
                  bash scripts/write_service_account_credentials.sh

workflows:
  version: 2
  lab-iam-profiles-pipeline:

    jobs:
      - terraform/plan:
          name: nonprod-change-plan
          context: << pipeline.parameters.context >>
          shell: secrethub run --env-file secrethub.nonprod.env -- /bin/sh -eo pipefail
          workspace: nonprod
          executor-image: << pipeline.parameters.executor-image >>
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                env: nonprod
          filters: *on-push-main

      - approve-nonprod-changes:
          type: approval
          requires:
            - nonprod-change-plan
          filters: *on-push-main

      - terraform/apply:
          name: nonprod-change-apply
          context: << pipeline.parameters.context >>
          shell: secrethub run --env-file secrethub.nonprod.env -- /bin/sh -eo pipefail
          workspace: nonprod
          executor-image: << pipeline.parameters.executor-image >>
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment:
                env: nonprod
          requires:
            - approve-nonprod-changes
          filters: *on-push-main

      - test-configuration-and-write-credentials:
          name: test-nonprod-iam-configuration
          context: << pipeline.parameters.context >>
          env: nonprod
          requires:
            - nonprod-change-apply
          filters: *on-push-main

      # release
      # - terraform/plan:
      #     name: prod-change-plan
      #     context: << pipeline.parameters.context >>
      #     shell: secrethub run --env-file secrethub.prod.env -- /bin/sh -eo pipefail
      #     workspace: prod
      #     executor-image: << pipeline.parameters.executor-image >>
      #     terraform-version: << pipeline.parameters.terraform-version >>
      #     before-terraform:
      #       - set-environment:
      #           env: prod
      #     filters: *on-tag-main

      # - approve-prod-changes:
      #     type: approval
      #     requires:
      #       - prod-change-plan
      #     filters: *on-tag-main

      # - terraform/apply:
      #     name: prod-change-apply
      #     context: << pipeline.parameters.context >>
      #     shell: secrethub run --env-file secrethub.prod.env -- /bin/sh -eo pipefail
      #     workspace: prod
      #     executor-image: << pipeline.parameters.executor-image >>
      #     terraform-version: << pipeline.parameters.terraform-version >>
      #     before-terraform:
      #       - set-environment:
      #           env: prod
      #     requires:
      #       - approve-prod-changes
      #     filters: *on-tag-main
    
      # - test-configuration-and-write-credentials:
      #     name: test-prod-iam-configuration
      #     context: << pipeline.parameters.context >>
      #     env: prod
      #     requires:
      #       - prod-change-apply
      #     filters: *on-tag-main

  generate-release-notes:
    jobs:
      - executor-tools/release:
          name: release-lab-iam-profiles
          context: << pipeline.parameters.context >>
          shell: secrethub run --env-file secrethub.nonprod.env -- /bin/sh -eo pipefail
          filters: *on-tag-main

# nightly iam-profiles configuration validation
  nightly-vpc-configuration-validation:
    triggers:
      - schedule:
          cron: "0 1 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - test-configuration-and-write-credentials:
          name: nightly-nonprod-iam-profiles-validation
          context: << pipeline.parameters.context >>
          env: sandbox
          test-only: true
      # - test-configuration-and-write-credentials:
      #     name: nightly-prod-iam-profiles-validation
      #     context: << pipeline.parameters.context >>
      #     env: 
      #     test-only: true
